# --- RBAC (keep)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-vip
rules:
  - apiGroups: [""]
    resources: ["services","endpoints","nodes"]   # add "pods" if lb_enable=true later
    verbs: ["get","list","watch","update","patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get","list","watch","create","update","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-vip
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-vip
subjects:
  - kind: ServiceAccount
    name: kube-vip
    namespace: kube-system

---
# --- Workload (DaemonSet on control-plane nodes)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-vip-ds
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: kube-vip
  template:
    metadata:
      labels:
        app: kube-vip
    spec:
      serviceAccountName: kube-vip
      hostNetwork: true
      # Prefer the control-plane label; older clusters may still use "master"
      nodeSelector:
        node-role.kubernetes.io/control-plane: "true"
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: kube-vip
          image: ghcr.io/kube-vip/kube-vip:v0.8.7
          args: ["manager"]
          env:
            - name: address                 # your API VIP
              value: "192.168.72.99"
            - name: interface               # <--- real NIC name here
              value: "kubevip0"
            - name: vip_arp
              value: "true"                 # ARP/L2 mode
            - name: vip_leaderelection
              value: "true"
            - name: cp_enable
              value: "true"                 # control-plane VIP
            - name: lb_enable
              value: "false"                # MetalLB will do Services
            - name: bgp_enable
              value: "false"
            # Optional: faster failover (tune if etcd/control-plane is busy)
            - name: vip_leaseDuration
              value: "5s"
            - name: vip_renewDeadline
              value: "3s"
            - name: vip_retryPeriod
              value: "1s"
          securityContext:
            capabilities:
              add: ["NET_ADMIN","NET_RAW"]
